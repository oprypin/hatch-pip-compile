{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"hatch-pip-compile","text":"<p>hatch plugin to use pip-compile to manage project dependencies</p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install hatch-pip-compile\n</code></pre>"},{"location":"#pipx","title":"pipx","text":"<p>Personally, I use pipx to install and use hatch. If you do too, you will need to inject the <code>hatch-pip-compile</code> plugin into the hatch environment.</p> <pre><code>pipx install hatch\npipx inject hatch hatch-pip-compile\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The <code>hatch-pip-compile</code> plugin will automatically run <code>pip-compile</code> whenever your environment needs to be updated. Behind the scenes, this plugin creates a lockfile at <code>.hatch/&lt;ENV_NAME&gt;.lock</code>. Alongside <code>pip-compile</code>, this plugin also uses <code>pip-sync</code> to install the dependencies from the lockfile into your environment.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>The environment plugin name is <code>pip-compile</code>.</p> <ul> <li> <p>pyproject.toml</p> <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\n</code></pre> </li> <li> <p>hatch.toml</p> <pre><code>[envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\n</code></pre> </li> </ul>"},{"location":"#lock-directory","title":"lock-directory","text":"<p>The directory where the lockfiles will be stored. Defaults to <code>.hatch</code>.</p> <ul> <li> <p>pyproject.toml</p> <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\nlock-directory = \"requirements\"\n</code></pre> </li> <li> <p>hatch.toml</p> <pre><code>[envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\nlock-directory = \"requirements\"\n</code></pre> </li> </ul>"},{"location":"#pip-compile-hashes","title":"pip-compile-hashes","text":"<p>Whether or not to use hashes in the lockfile. Defaults to <code>true</code>.</p> <ul> <li> <p>pyproject.toml</p> <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\npip-compile-hashes = true\n</code></pre> </li> <li> <p>hatch.toml</p> <pre><code>[envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\npip-compile-hashes = true\n</code></pre> </li> </ul>"},{"location":"#pip-compile-args","title":"pip-compile-args","text":"<p>Extra arguments to pass to <code>pip-compile</code>. Defaults to None.</p> <ul> <li> <p>pyproject.toml</p> <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\npip-compile-args = [\n\"--index-url\",\n\"https://pypi.org/simple\",\n]\n</code></pre> </li> <li> <p>hatch.toml</p> <pre><code>[envs.&lt;ENV_NAME&gt;]\ntype = \"pip-compile\"\npip-compile-args = [\n\"--index-url\",\n\"https://pypi.org/simple\",\n]\n</code></pre> </li> </ul> <p></p> <p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#environment-setup","title":"Environment Setup","text":"<p>pipx</p> <p>This documentaion uses pipx to install and manage non-project command line tools like <code>hatch</code> and <code>pre-commit</code>. If you don't already have <code>pipx</code> installed, make sure to see their documentation. If you prefer not to use <code>pipx</code>, you can use <code>pip</code> instead.</p> <ol> <li> <p>Install hatch</p> <pre><code>pipx install hatch\n</code></pre> <p>pre-commit</p> <p>Hatch will attempt to set up pre-commit hooks for you using pre-commit. If you don't already, make sure to install pre-commit as well: <code>pipx install pre-commit</code></p> </li> <li> <p>Build the Virtual Environment</p> <pre><code>hatch env create\n</code></pre> </li> <li> <p>If you need to, you can link hatch's virtual environment to your IDE.     It's located in the <code>.venv</code> directory at the root of the project.</p> </li> <li> <p>Activate the Virtual Environment</p> <pre><code>hatch shell\n</code></pre> </li> </ol>"},{"location":"contributing/#using-hatch","title":"Using Hatch","text":""},{"location":"contributing/#hatch-cheat-sheet","title":"Hatch Cheat Sheet","text":"Command Description Command Notes Run Tests <code>hatch run cov</code> Runs tests with <code>pytest</code> and <code>coverage</code> Run Formatting <code>hatch run lint:fmt</code> Runs <code>ruff</code> code formatter Run Linting <code>hatch run lint:all</code> Runs <code>ruff</code> and <code>mypy</code> linters / type checkers Run Type Checking <code>hatch run lint:typing</code> Runs <code>mypy</code> type checker Update Requirements Lock Files <code>hatch run gen:reqs</code> Updating lock file using <code>pip-compile</code> Upgrade Dependencies <code>hatch run gen:reqs-update</code> Updating lock file using <code>pip-compile</code> and <code>--update</code> flag Serve the Documentation <code>hatch run docs:serve</code> Serve the documentation using MkDocs Run the <code>pre-commit</code> Hooks <code>hatch run lint:precommit</code> Runs the <code>pre-commit</code> hooks on all files"},{"location":"contributing/#hatch-explanation","title":"Hatch Explanation","text":"<p>Hatch is a Python package manager. It's most basic use is as a standardized build-system. However, hatch also has some extra features which this project takes advantage of. These features include virtual environment management and the organization of common scripts like linting and testing. All the operations in hatch take place in one of its managed virtual environments.</p> <p>Hatch has a variety of environments, to see them simply ask hatch:</p> hatch CLIOutput <pre><code>hatch env show\n</code></pre> <pre><code>                           Standalone                           \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name    \u2503 Type    \u2503 Dependencies               \u2503 Scripts     \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 default \u2502 virtual \u2502 coverage[toml]&gt;=6.5        \u2502 cov         \u2502\n\u2502         \u2502         \u2502 pytest                     \u2502 cov-report  \u2502\n\u2502         \u2502         \u2502                            \u2502 test        \u2502\n\u2502         \u2502         \u2502                            \u2502 test-cov    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 docs    \u2502 virtual \u2502 markdown-exec[ansi]~=1.6.0 \u2502 build       \u2502\n\u2502         \u2502         \u2502 mkdocs-material~=9.2.3     \u2502 deploy      \u2502\n\u2502         \u2502         \u2502 mkdocstrings~=0.22.0       \u2502 serve       \u2502\n\u2502         \u2502         \u2502 mkdocs~=1.5.2              \u2502             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 gen     \u2502 virtual \u2502 pip-tools~=7.1.0           \u2502 cov         \u2502\n\u2502         \u2502         \u2502                            \u2502 cov-report  \u2502\n\u2502         \u2502         \u2502                            \u2502 release     \u2502\n\u2502         \u2502         \u2502                            \u2502 reqs        \u2502\n\u2502         \u2502         \u2502                            \u2502 reqs-update \u2502\n\u2502         \u2502         \u2502                            \u2502 test        \u2502\n\u2502         \u2502         \u2502                            \u2502 test-cov    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 lint    \u2502 virtual \u2502 mypy&gt;=1.6.1                \u2502 all         \u2502\n\u2502         \u2502         \u2502 ruff~=0.1.4                \u2502 fmt         \u2502\n\u2502         \u2502         \u2502                            \u2502 precommit   \u2502\n\u2502         \u2502         \u2502                            \u2502 style       \u2502\n\u2502         \u2502         \u2502                            \u2502 typing      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             Matrices                             \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name \u2503 Type    \u2503 Envs       \u2503 Dependencies        \u2503 Scripts    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 all  \u2502 virtual \u2502 all.py3.8  \u2502 coverage[toml]&gt;=6.5 \u2502 cov        \u2502\n\u2502      \u2502         \u2502 all.py3.9  \u2502 pytest              \u2502 cov-report \u2502\n\u2502      \u2502         \u2502 all.py3.10 \u2502                     \u2502 test       \u2502\n\u2502      \u2502         \u2502 all.py3.11 \u2502                     \u2502 test-cov   \u2502\n\u2502      \u2502         \u2502 all.py3.12 \u2502                     \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>That above command will tell you that there are four environments that you can use:</p> <ul> <li><code>default</code></li> <li><code>docs</code></li> <li><code>gen</code></li> <li><code>lint</code></li> </ul> <p>Each of these environments has a set of commands that you can run. To see the commands for a specific environment, run:</p> hatch CLIOutput <pre><code>hatch env show default\n</code></pre> <pre><code>                       Standalone                       \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name    \u2503 Type    \u2503 Dependencies        \u2503 Scripts    \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 default \u2502 virtual \u2502 coverage[toml]&gt;=6.5 \u2502 cov        \u2502\n\u2502         \u2502         \u2502 pytest              \u2502 cov-report \u2502\n\u2502         \u2502         \u2502                     \u2502 test       \u2502\n\u2502         \u2502         \u2502                     \u2502 test-cov   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Here we can see that the <code>default</code> environment has the following commands:</p> <ul> <li><code>cov</code></li> <li><code>cov-report</code></li> <li><code>test</code></li> <li><code>test-cov</code></li> </ul> <p>The one that we're interested in is <code>cov</code>, which will run the tests for the project.</p> <pre><code>hatch run cov\n</code></pre> <p>Since <code>cov</code> is in the default environment, we can run it without specifying the environment. However, to run the <code>serve</code> command in the <code>docs</code> environment, we need to specify the environment:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>You can see what scripts are available using the <code>env show</code> command</p> hatch CLIOutput <pre><code>hatch env show docs\n</code></pre> <pre><code>                       Standalone                        \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name \u2503 Type    \u2503 Dependencies               \u2503 Scripts \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 docs \u2502 virtual \u2502 markdown-exec[ansi]~=1.6.0 \u2502 build   \u2502\n\u2502      \u2502         \u2502 mkdocs-material~=9.2.3     \u2502 deploy  \u2502\n\u2502      \u2502         \u2502 mkdocstrings~=0.22.0       \u2502 serve   \u2502\n\u2502      \u2502         \u2502 mkdocs~=1.5.2              \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"contributing/#committing-code","title":"Committing Code","text":"<p>This project uses pre-commit to run a set of checks on the code before it is committed. The pre-commit hooks are installed by hatch automatically when you run it for the first time.</p> <p>This project uses semantic-versioning standards, managed by semantic-release. Releases for this project are handled entirely by CI/CD via pull requests being merged into the <code>main</code> branch. Contributions follow the gitmoji standards with conventional commits.</p> <p>While you can denote other changes on your commit messages with gitmoji, the following commit message emoji prefixes are the only ones to trigger new releases:</p> Emoji Shortcode Description Semver \ud83d\udca5 :boom: Introduce breaking changes. Major \u2728 :sparkles: Introduce new features. Minor \ud83d\udc1b :bug: Fix a bug. Patch \ud83d\ude91 :ambulance: Critical hotfix. Patch \ud83d\udd12 :lock: Fix security issues. Patch <p>Most features can be squash merged into a single commit on a pull-request. When merging multiple commits, they will be summarized into a single release.</p> <p>If you're working on a new feature, your commit message might look like:</p> <pre><code>\u2728 New Feature Description\n</code></pre> <p>Bug fix commits would look like this:</p> <pre><code>\ud83d\udc1b Bug Fix Description\n</code></pre> <p>If you're working on a feature that introduces breaking changes, your commit message might look like:</p> <pre><code>\ud83d\udca5 Breaking Change Description\n</code></pre> <p>Other commits that don't trigger a release, but get included in the release notes might look like:</p> <pre><code>\ud83d\udcdd Documentation Update Description\n\ud83d\udc77 CI/CD Update Description\n\ud83e\uddea Testing Changes Description\n\ud83d\ude9a Moving/Renaming Description\n\u2b06\ufe0f Dependency Upgrade Description\n</code></pre>"},{"location":"contributing/#pre-releases","title":"Pre-Releases","text":"<p>semantic-release supports pre-releases. To trigger a pre-release, you would merge your pull request into an <code>alpha</code> or <code>beta</code> branch.</p>"},{"location":"contributing/#specific-release-versions","title":"Specific Release Versions","text":"<p>In some cases you need more advanced control around what kind of release you need to create. If you need to release a specific version, you can do so by creating a new branch with the version number as the branch name. For example, if the current version is <code>2.3.2</code>, but you need to release a fix as <code>1.2.5</code>, you would create a branch named <code>1.2.x</code> and merge your changes into that branch.</p> <p>See the semantic-release documentation for more information about branch based releases and other advanced release cases.</p>"}]}